package com.example.api.Controllers;import com.example.api.Entity.Post;import com.example.api.Response.ApiResponse;import com.example.api.DTO.PostRequestDTO;import com.example.api.Response.PostResponseDto;import com.example.api.ServicesImpl.BlogPostServiceImplementation;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpSession;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequiredArgsConstructor@RequestMapping("api/v1/post")@Slf4jpublic class BlogPostController {    private final BlogPostServiceImplementation blogPost;    private final HttpServletRequest Httprequest;    @PostMapping("/create")    public ResponseEntity<ApiResponse> createPost(@RequestBody PostRequestDTO request) {        log.info(" About to use the Request to make a Post: {}", request.getAuthorID());        HttpSession session = Httprequest.getSession();        Post response = blogPost.createPost(request,session);        return ResponseEntity.status(HttpStatus.CREATED).body(                ApiResponse.builder()                        .data(response)                        .message((response!=null) ? "SUCCESS" : "ERROR")                        .status(HttpStatus.CREATED)                        .build()        );    }    @PutMapping("{postId:[\\d]+}")    public ResponseEntity<ApiResponse<PostResponseDto>> updatePost(@RequestBody PostRequestDTO request,                                                                   @PathVariable Long postId) {        var authorId = blogPost.updatePost(request,postId);        log.info("Author of post: {}", authorId);        log.info("Post id: {}", postId);            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(                    ApiResponse.<PostResponseDto>builder()                            .message((authorId!=null)?"You Can Update":"You are not the author of this post")                            .status(HttpStatus.FORBIDDEN)                            .build()            );    }    @DeleteMapping("delete/{postid}")    public ResponseEntity<Object> delete(@PathVariable("postid") Long postid,                                         @RequestBody PostRequestDTO postRequestDTO){       blogPost.deletePost(postid);       return new ResponseEntity<>("DELETED",HttpStatus.GONE);    }    @GetMapping("/allPost")    public ResponseEntity<ApiResponse> getAll(){        List<Post> post = blogPost.getAllPost();        return ResponseEntity.status(HttpStatus.OK).body(                ApiResponse.builder()                        .message("SUCCESS")                        .data(post)                        .status(HttpStatus.CONTINUE).build()        );    }}