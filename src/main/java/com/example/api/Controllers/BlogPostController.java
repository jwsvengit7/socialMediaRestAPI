package com.example.api.Controllers;import com.example.api.Response.ApiResponse;import com.example.api.DTO.PostRequestDTO;import com.example.api.Response.PostResponseDto;import com.example.api.Services.LikeService;import com.example.api.ServicesImpl.BlogPostImpl;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@RestController@RequiredArgsConstructor@RequestMapping("post")@Slf4jpublic class BlogPostController {    private final BlogPostImpl blogPost;    private final LikeService likeService;    @PostMapping("/")    public ResponseEntity<ApiResponse<PostResponseDto>> createPost(@RequestBody PostRequestDTO request) {        log.info(" About to use the Request to make a Post: {}", request.getAdminId());        log.info(" About to use the Request to make a Post with categories: {}", request.getCategories());        PostResponseDto response = blogPost.createPost(request);        return ResponseEntity.ok().body(                ApiResponse.<PostResponseDto>builder()                        .data(response)                        .message("SUCCESS")                        .status(HttpStatus.CREATED)                        .build()        );    }    @PutMapping("{postId:[\\d]+}")    public ResponseEntity<ApiResponse<PostResponseDto>> updatePost(@RequestBody PostRequestDTO request,                                                                   @PathVariable Long postId) {        // verify if the author is the same as the logged in user        var authorId = blogPost.getAuthorOfPost(postId);        log.info("Author of post: {}", authorId);        log.info("Post id: {}", postId);        if (!request.getAdminId().equals(authorId)) {            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(                    ApiResponse.<PostResponseDto>builder()                            .message("You are not the author of this post")                            .status(HttpStatus.FORBIDDEN)                            .build()            );        }}