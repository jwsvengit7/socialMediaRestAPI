package com.example.api.ServicesImpl;import com.example.api.DTO.PostRequestDTO;import com.example.api.Entity.Post;import com.example.api.Entity.User;import com.example.api.Exceptions.PostNotFoundException;import com.example.api.Repository.PostRepository;import com.example.api.Services.BlogPostService;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpSession;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.modelmapper.ModelMapper;import org.springframework.stereotype.Service;import java.util.List;@Slf4j@Service@RequiredArgsConstructorpublic class BlogPostServiceImplementation implements BlogPostService {    private final PostRepository productRepository;    private final HttpServletRequest request;    private final ModelMapper modelMapper;    @Override    public Post createPost(PostRequestDTO postRequestDto,HttpSession session) {        if (session.getAttribute("userDTO") == null) {            return null;        } else {            Object posts = session.getAttribute("userDTO");            Post post = new Post();                    post.setAuthor(postRequestDto.getAuthor());                    post.setTitle(postRequestDto.getTitle());                    post.setUser((User) posts);                    post.setContent(postRequestDto.getContent());                    post.setPublishedDate(postRequestDto.getPublishedDate());                    return  productRepository.save(post);          /*  PostRequestDTO savePost = modelMapper.map(productRepository.save(post),PostRequestDTO.class);            return savePost;*/        }    }    @Override    public PostRequestDTO updatePost(PostRequestDTO postRequestDTO, Long id) {        log.info("Post about to find: {}", postRequestDTO.getTitle());        Post post = productRepository.findById(id).orElseThrow(() -> {            throw new PostNotFoundException(id);        });        log.info("Post found: {}", post.getTitle());        post.setTitle(postRequestDTO.getTitle());        post.setContent(postRequestDTO.getContent());        var _post = productRepository.save(post);        PostRequestDTO update = modelMapper.map(_post,PostRequestDTO.class);        return update;    }    @Override    public void deletePost(Long id) {        Post user = productRepository.findById(id).orElseThrow(() -> {            throw new PostNotFoundException(id);        });        productRepository.delete(user);    }    @Override    public Long getAuthorOfPost(Long id) {        Post post = productRepository.findById(id).orElseThrow(() -> {            throw new PostNotFoundException(id);        });        return post.getUser().getId();    }    @Override    public List<Post> getAllPost(){        return productRepository.findAll();    }}