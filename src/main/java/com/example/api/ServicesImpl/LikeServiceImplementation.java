package com.example.api.ServicesImpl;import com.example.api.DTO.LikeRequestDto;import com.example.api.DTO.PostRequestDTO;import com.example.api.DTO.UserDTO;import com.example.api.Entity.Likes;import com.example.api.Entity.Post;import com.example.api.Entity.User;import com.example.api.Repository.LikeRepository;import com.example.api.Repository.PostRepository;import com.example.api.Services.LikeService;import jakarta.servlet.http.HttpSession;import lombok.RequiredArgsConstructor;import org.modelmapper.ModelMapper;import org.springframework.stereotype.Service;import org.webjars.NotFoundException;import java.util.Optional;@Service@RequiredArgsConstructorpublic class LikeServiceImplementation implements LikeService {    private final LikeRepository likeRepository;    private final PostRepository postRepository;    private final ModelMapper modelMapper;    @Override    public LikeRequestDto likeOrUnlikePost(Long id, LikeRequestDto likeRequestDto, HttpSession session) {        Post post = postRepository.findById(id).orElse(null);        User check =(User)session.getAttribute("userDTO");        Optional<Likes> checks = likeRepository.findById(check.getId());        if (post == null && session.getAttribute("userDTO")==null) {            throw new NotFoundException("Post not found");        } else {            if (!likeRequestDto.getLikes()) {                throw new IllegalArgumentException("Likes must be set true to confirm that ther particular user just like");            }            if(checks.isPresent()){                throw new IllegalArgumentException("User Already Like the post");            }else {                Likes likes = Likes.builder()                        .user((User) session.getAttribute("userDTO"))                        .likes(likeRequestDto.getLikes())                        .build();                likes.setPost(post);                likes.setLikes(likeRequestDto.getLikes());                likes.setUser((User) session.getAttribute("userDTO"));                return modelMapper.map(likeRepository.save(likes),LikeRequestDto.class);            }        }    }}