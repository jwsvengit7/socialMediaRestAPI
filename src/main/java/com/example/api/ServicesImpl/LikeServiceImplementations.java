package com.example.api.ServicesImpl;import com.example.api.DTO.LikeRequestDto;import com.example.api.Entity.Likes;import com.example.api.Entity.Post;import com.example.api.Entity.User;import com.example.api.Repository.LikeRepositories;import com.example.api.Repository.PostRepositories;import com.example.api.Repository.UserRepositories;import com.example.api.Services.LikeService;import lombok.RequiredArgsConstructor;import org.modelmapper.ModelMapper;import org.springframework.stereotype.Service;import org.webjars.NotFoundException;import java.util.Optional;@Service@RequiredArgsConstructorpublic class LikeServiceImplementations implements LikeService {    private final LikeRepositories likeRepositories;    private final PostRepositories postRepositories;    private final UserRepositories userRepositories;    private final ModelMapper modelMapper;    @Override    public LikeRequestDto likes(Long id, LikeRequestDto likeRequestDto, String email) {        Post post = postRepositories.findById(id).orElse(null);        User check = userRepositories.findUserByEmail(email).orElse(null);        Optional<Likes> checks = likeRepositories.findLikesByUserIdAndPost(post.getPost_id(),check.getId());        if (!checks.isEmpty()) {            throw new NotFoundException("Post not found");        } else {            if (!likeRequestDto.getLikes()) {                throw new IllegalArgumentException("Likes must be set true to confirm that there particular user just like");            }            Likes likes = Likes.builder()                    .user(check)                    .likes(likeRequestDto.getLikes())                    .post(post)                    .build();            return modelMapper.map(likeRepositories.save(likes), LikeRequestDto.class);        }    }}