package com.example.api.ServicesImpl;import com.example.api.DTO.PostRequestDTO;import com.example.api.Entity.Post;import com.example.api.Entity.User;import com.example.api.Repository.PostRepositories;import com.example.api.Repository.UserRepositories;import com.example.api.Services.BlogPostService;import jakarta.transaction.Transactional;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.modelmapper.ModelMapper;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Service;import java.util.List;@Slf4j@Service@RequiredArgsConstructorpublic class PostServiceImplementation implements BlogPostService {    private final PostRepositories postRepositories;    private final UserRepositories userRepositories;    private final ModelMapper modelMapper;    @Transactional    @Override    public PostRequestDTO addPost(PostRequestDTO postDTO, String email){        User user  = userRepositories.findByEmail(email).orElse(null);        if (user!=null){            Post post = Post.builder()                    .author(postDTO.getAuthor())                    .title(postDTO.getTitle())                    .content(postDTO.getContent())                    .user(getLoggedInUser())                    .build();            return modelMapper.map(postRepositories.save(post),PostRequestDTO.class);        }else{            throw new RuntimeException("Error to post");        }    }    public User getLoggedInUser(){        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String name = authentication.getName();        return userRepositories.findByEmail(name).orElse(null);    }    @Override    public PostRequestDTO updatePost(PostRequestDTO postRequestDTO, Long id,String email) {        Post post = postRepositories.findById(id).orElseThrow(() -> {            throw new RuntimeException("Error Loading");        });        User user = userRepositories.findByEmail(email).orElseThrow(() -> {            throw new RuntimeException("Error Loading");        });        post.setAuthor(postRequestDTO.getAuthor());        post.setTitle(postRequestDTO.getTitle());        post.setContent(postRequestDTO.getContent());        post.setUser(user);        return modelMapper.map(postRepositories.save(post),PostRequestDTO.class);    }    @Override    public void deletePost(Long id,String email) {        Post post = postRepositories.findById(id).orElseThrow(() -> {            throw new RuntimeException("Error");        });        User user = userRepositories.findByEmail(email).orElseThrow(() -> {            throw new RuntimeException("Error Loading");        });        postRepositories.delete(post);    }    @Override    public List<Post> getAllPost(){        return postRepositories.findAll();    }}